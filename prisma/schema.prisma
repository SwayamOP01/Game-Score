generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(cuid())
  name                   String?
  email                  String?  @unique
  emailVerified          DateTime?
  image                  String?
  passwordHash           String?
  language               String   @default("en")
  subscriptionPlan       String   @default("free")
  subscriptionExpiresAt  DateTime?

  accounts  Account[]
  sessions  Session[]
  analyses  Analysis[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Analysis {
  id         String   @id @default(cuid())
  userId     String
  createdAt  DateTime @default(now())
  game       String
  region     String
  clipPath   String
  status     String   @default("completed") // "pending" | "completed"
  summary    String
  statsJson  String   // JSON string with detailed stats
  cheatFlag  Boolean  @default(false) // True if flagged as potential hacker
  cheatScore Float    @default(0.0)   // AI-computed cheat risk score (0.0-1.0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}